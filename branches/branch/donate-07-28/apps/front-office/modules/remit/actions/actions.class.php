<?php
// auto-generated by sfPropelCrud
// date: 2009/07/22 03:42:29
?>
<?php

/**
 * remit actions.
 *
 * @package    donate
 * @subpackage remit
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class remitActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('remit', 'list');
  }

  public function executeListdonate()
  {
  	$c = new Criteria();
    $c -> add(RemitPeer::DONATION_ID, $this->getRequestParameter('donation_id'));
        
  	$pager = new sfPropelPager('Remit', sfConfig::get('app_pager_homepage_max'));
  	$pager->setCriteria($c);        
    $pager->setPage($this->getRequestParameter('page', 1));
    $pager->init();
    $this->pager = $pager;
  }

  public function executeShow()
  {
    $this->remit = RemitPeer::retrieveByPk($this->getRequestParameter('remit_id'));
    $this->forward404Unless($this->remit);
  }

  public function executeCreate()
  {
    $this->remit = new Remit();
    
    $this->remit->setDonationId($this->getRequestParameter('donation_id'));

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->remit = RemitPeer::retrieveByPk($this->getRequestParameter('remit_id'));
    $this->forward404Unless($this->remit);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('remit_id'))
    {
      $remit = new Remit();
    }
    else
    {
      $remit = RemitPeer::retrieveByPk($this->getRequestParameter('remit_id'));
      $this->forward404Unless($remit);
    }

    $remit->setRemitId($this->getRequestParameter('remit_id'));
    $remit->setDonationId($this->getRequestParameter('donation_id') ? $this->getRequestParameter('donation_id') : null);
    $remit->setAmount($this->getRequestParameter('amount'));
    $remit->setIsByOfs($this->getRequestParameter('is_by_ofs', 0));
    $remit->setIsReceived($this->getRequestParameter('is_received', 0));
    if ($this->getRequestParameter('receive_date'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('receive_date'), $this->getUser()->getCulture());
      $remit->setReceiveDate("$y-$m-$d");
    }
    $remit->setReceiveUserId($this->getRequestParameter('receive_user_id') ? $this->getRequestParameter('receive_user_id') : null);
    $remit->setIsSendout($this->getRequestParameter('is_sendout', 0));
    if ($this->getRequestParameter('sendout_date'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('sendout_date'), $this->getUser()->getCulture());
      $remit->setSendoutDate("$y-$m-$d");
    }
    $remit->setSendoutUserId($this->getRequestParameter('sendout_user_id') ? $this->getRequestParameter('sendout_user_id') : null);

    $remit->save();

    return $this->redirect('remit/show?remit_id='.$remit->getRemitId());
  }
  public function executeDelete()
  {
    $remit = RemitPeer::retrieveByPk($this->getRequestParameter('remit_id'));

    $this->forward404Unless($remit);

    $remit->delete();

    return $this->redirect('remit/list');
  }
}
