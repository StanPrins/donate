<?php
// auto-generated by sfPropelCrud
// date: 2009/09/03 02:13:30
?>
<?php

/**
 * topic actions.
 *
 * @package    qqchong
 * @subpackage topic
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class topicActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('topic', 'list');
  }

  public function executeList()
  {
  	$dpt_id = $this->getRequestParameter('dpt_id');
  	$this->department = DepartmentPeer::retrieveByPK($dpt_id);
  	$t = new Criteria();
  	$t->add(TopicPeer::DEPARTMENT_ID,$dpt_id);
  	$t->addDescendingOrderByColumn(TopicPeer::CREATED_AT);
  	$pager = new sfPropelPager('Topic',sfConfig::get('app_pager_max'));
  	$pager->setCriteria($t);
  	$pager->setPage($this->getRequestParameter('page', 1));
  	$pager->init();
  	$this->pager = $pager;
  }

  public function executeShow()
  {
  	$topic_id = $this->getRequestParameter('id');
    $this->topic = TopicPeer::retrieveByPk($topic_id);
    $this->user = $this->getUser()->getAttribute('user_id');
    $this->forward404Unless($this->topic);
    $c = new Criteria();
    $c->add(CommentPeer::TOPIC_ID,$topic_id);
    $c->addDescendingOrderByColumn(CommentPeer::CREATED_AT);
    $pager = new sfPropelPager('Comment', sfConfig::get('app_pager_max'));
	$pager->setCriteria($c);
	$pager->setPage($this->getRequestParameter('page', 1));
	$pager->init();
	$this->pager = $pager;
  }

  public function executeCreate()
  {
    $this->topic = new Topic();
    $this->topic->setDepartmentId($this->getRequestParameter('dpt_id'));
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->topic = TopicPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->topic);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $topic = new Topic();
    }
    else
    {
      $topic = TopicPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($topic);
    }
	$user = UserPeer::retrieveByPK($this->getUser()->getAttribute('user_id'));
    $topic->setId($this->getRequestParameter('id'));
    $topic->setDepartmentId($user->getDepartmentId());
    $topic->setUserId($user->getId());
    $topic->setTitle($this->getRequestParameter('title'));    
    $topic->setContent($this->getRequestParameter('content'));

    $topic->save();

    return $this->redirect('topic/show?id='.$topic->getId());
  }

  public function executeDelete()
  {
    $topic = TopicPeer::retrieveByPk($this->getRequestParameter('id'));
    $dpt_id = $topic->getDepartmentId();

    $this->forward404Unless($topic);

    $topic->delete();

    return $this->redirect('topic/list?dpt_id='.$dpt_id);
  }
  
  public function handleErrorUpdate()
  {
  	$topic_id = $this->getRequestParameter('id');
	if(empty($topic_id))
	{
		return $this->forward('topic','create');
	}
	else
	{
		$this->getRequest()->setParameter('id',$topic_id);
    	return $this->forward('topic','edit');
	}
  }
}
