<?php
// auto-generated by sfPropelCrud
// date: 2009/09/03 02:13:41
?>
<?php

/**
 * user actions.
 *
 * @package    qqchong
 * @subpackage user
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class userActions extends sfActions
{
  public function executeHome()
  {
  	if($this->getRequestParameter('dpt_id'))
  		$dep_id = $this->getRequestParameter('dpt_id');
    else
    	$dep_id = UserPeer::retrieveByPK($this->getUser()->getAttribute('user_id'))->getDepartmentId();
    
  	$f = new Criteria();
  	$f->add(UserPeer::DEPARTMENT_ID,$dep_id);
  	$f->addAscendingOrderByColumn(UserPeer::NICKNAME);
  	$members = UserPeer::doSelect($f);
  	$amembers = array();
  	$imembers = array();
  	$a = 0;
  	$i = 0;
  	foreach($members as $member)
  	{
  		$c = new Criteria();
  		$c->add(BlogPeer::USER_ID,$member->getId());
  		$c->add(BlogPeer::CREATED_AT,time()-86400*sfConfig::get('app_active_days'),Criteria::GREATER_THAN);
  		$count = BlogPeer::doCount($c);
  		if($count > 0)
  		{
  			$amembers[$a]['user_id'] = $member->getId();
  			$amembers[$a]['nickname'] = $member->getNickname();
  			$amembers[$a]['count'] = $count;
  			$a++;  			
  		}
  		else
  		{
  			$im = new Criteria();
  			$im->add(BlogPeer::USER_ID,$member->getId());
  			$im->addDescendingOrderByColumn(BlogPeer::CREATED_AT);
  			$blog = BlogPeer::doSelectOne($im);
  			$imembers[$i]['user_id'] = $member->getId();
  			$imembers[$i]['nickname'] = $member->getNickname();
  			$imembers[$i]['time'] = ($blog)?floor((time()-$blog->getCreateAt())/86400):null;
  			$i++;
  		}  		
  	}
  	$this->amembers = $amembers;
  	$this->imembers = $imembers;
  	
  	
  	
  	$item_limit = sfConfig::get('app_homepage_max');
  	$h =new Criteria();
  	$h->add(BlogPeer::RECOMMEND,1);
  	$h->addDescendingOrderByColumn(BlogPeer::RDTIME);
  	$h->setLimit($item_limit);
  	$this->hots = BlogPeer::doSelect($h);
  	$this->hnumber = BlogPeer::doCount($h);
  	
  	$b = new Criteria();
  	$b->add(BlogPeer::CREATED_AT,time()-86400*sfConfig::get('app_active_days'),Criteria::GREATER_THAN);
  	$b->addDescendingOrderByColumn(BlogPeer::CREATED_AT);
  	$b->setLimit($item_limit);
  	$this->blogs =  BlogPeer::doSelect($b);
  	$this->bnumber = BlogPeer::doCount($b);
  	
  	$t = new Criteria();
  	$t->add(TopicPeer::CREATED_AT,time()-86400*sfConfig::get('app_active_days'),Criteria::GREATER_THAN);
  	$t->addDescendingOrderByColumn(TopicPeer::CREATED_AT);
  	$t->setLimit($item_limit);
  	$this->topics = TopicPeer::doSelect($t);
  	$this->tnumber = TopicPeer::doCount($t);
	
	$this->item_max = $item_limit;
  	
	return sfView::SUCCESS; 
  }
  
  public function executeRecent()
  {
  	$type = $this->getRequestParameter('type');
  	switch($type)
  	{
  		case 'hot':
  			$h =new Criteria();
		  	$h->add(BlogPeer::RECOMMEND,1);
		  	$h->addDescendingOrderByColumn(BlogPeer::RDTIME);
		  	$pager = new sfPropelPager('Blog',sfConfig::get('app_pager_max'));
		  	$pager->setCriteria($h);
		  	$pager->setPage($this->getRequestParameter('page', 1));	  	
  			break;
  		case 'all':
  			$b = new Criteria();
		  	$b->add(BlogPeer::CREATED_AT,time()-86400*sfConfig::get('app_active_days'),Criteria::GREATER_THAN);
		  	$b->addDescendingOrderByColumn(BlogPeer::CREATED_AT);
		  	$pager = new sfPropelPager('Blog',sfConfig::get('app_pager_max'));
		  	$pager->setCriteria($b);
		  	$pager->setPage($this->getRequestParameter('page', 1));
  			break;
  		case 'topic':
  			$t = new Criteria();
		  	$t->add(TopicPeer::CREATED_AT,time()-86400*sfConfig::get('app_active_days'),Criteria::GREATER_THAN);
		  	$t->addDescendingOrderByColumn(TopicPeer::CREATED_AT);
		  	$pager = new sfPropelPager('Topic',sfConfig::get('app_pager_max'));
		  	$pager->setCriteria($t);
		  	$pager->setPage($this->getRequestParameter('page', 1));
  			break;
  	}
  	$pager->init();
  	$this->pager = $pager;
  	$this->type = $type;
  }
  
  public function executeLogin()
  {
  	if ($this->getRequest()->getCookie('QQchong'))
    {
      $value = unserialize(base64_decode($this->getRequest()->getCookie('QQchong')));
      $c = new Criteria();
      $c->add(UserPeer::REMEMBER_KEY, $value[0]);
      $c->add(UserPeer::USERNAME, $value[1]);
      $user = UserPeer::doSelectOne($c);
	  if ($user)
	  {
	    // sign in
	    $this->getContext()->getUser()->signIn($user);
	    // proceed to home page
	    return $this->redirect('user/home');
	  }
	}  	
  	elseif($this->getRequestParameter('username'))
  	{
		$c = new Criteria();
	    $c->add(UserPeer::USERNAME, $this->getRequestParameter('username'));
	    $user = UserPeer::doSelectOne($c);
	    if ($user)
	    {
	      // check if the password is correct
	      $password = $this->getRequestParameter('password');
	      if (sha1($user->getSalt().$password) == $user->getSha1Password())
	      {
	        // sign in
	        $remember = $this->getRequestParameter('remember');
	        $this->getContext()->getUser()->signIn($user,$remember);
	        // proceed to home page
	        return $this->redirect('user/home');
	      }
	      else
	      {
	        $this->getRequest()->setError('password', 'wrong password');
	      }
	    }
	    else
	    {
	      $this->getRequest()->setError('username', 'unregistered email');
	    }
	 
	    // an error was found
	    return sfView::SUCCESS;
  	}
  	else
  	{
  		return sfView::SUCCESS;
  	}  	
  }

  //User log out
  public function executeLogout()
  {
	$this->getContext()->getUser()->signOut();
	$this->redirect('@login');
  }
		
  public function executeList()
  {
    $this->users = UserPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
  	$this->owner = UserPeer::retrieveByPK($this->getUser()->getAttribute('user_id'));
  	if($this->getRequestParameter('id'))
  		$this->user = UserPeer::retrieveByPK($this->getRequestParameter('id'));
  	else
    	$this->user = $this->owner;
    $this->forward404Unless($this->user);
  }

  public function executeCreate()
  {
    $this->user = new User();
    $this->departments = DepartmentPeer::doSelect(new Criteria);
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
  	$ownerid = $this->getUser()->getAttribute('user_id');
    $this->user = UserPeer::retrieveByPk($ownerid);
    $this->departments = DepartmentPeer::doSelect(new Criteria);
    $this->forward404Unless($this->user);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $user = new User();
      $user->setPassword($this->getRequestParameter('password'));
    }
    else
    {
      $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($user);
      if($this->getRequestParameter('password'))
            $user->setPassword($this->getRequestParameter('password'));
    }

    $user->setId($this->getRequestParameter('id'));
    $user->setUsername($this->getRequestParameter('username'));
    $user->setNickname($this->getRequestParameter('nickname'));
    $user->setName($this->getRequestParameter('name'));
    $user->setDepartmentId($this->getRequestParameter('department_id') ? $this->getRequestParameter('department_id') : null);
  	if(is_file($this->getRequest()->getFilePath('photo')))
    {
    	$filename = md5(uniqid(mt_rand()));
    	$file = $this->getRequest()->getFilePath('photo');
    	$extension = $this->getRequest()->getFileExtension('photo');
    	$newfilename = $filename.$extension;
    	$img = new sfImage($file);
    	$response = $this->getResponse();
    	$response->setContentType($img->getMIMEType());
    	$width = sfConfig::get('sf_image_width');
    	$height = sfConfig::get('sf_image_height');
    	$width = ($img->getWidth()>$width)?$width:($img->getWidth());
    	$height = ($img->getHeight()>$height)?$height:($img->getHeight());
    	$img->resize($width,$height);
    	$img->saveAs(sfConfig::get('sf_web_dir').DIRECTORY_SEPARATOR.'images'.DIRECTORY_SEPARATOR.'users'.DIRECTORY_SEPARATOR.$newfilename);
    	$user->setPhoto($newfilename);	
	}
    $user->setDuty($this->getRequestParameter('duty'));
    $user->setMobile($this->getRequestParameter('mobile'));
    $user->setTel($this->getRequestParameter('tel'));
    $user->setTwitter($this->getRequestParameter('twitter'));
    $user->setDroit($this->getRequestParameter('droit'));
    $user->setQq($this->getRequestParameter('qq'));
    $user->setMsn($this->getRequestParameter('msn'));

    $user->save();
	if ($this->getRequestParameter('id'))
    	return $this->redirect('user/show');
    else
    	return $this->redirect('user/login');
  }

  public function executeDelete()
  {
    $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($user);

    $user->delete();

    return $this->redirect('user/home');
  }
  
  public function executeChange()
  {
  	if($this->getRequestParameter('password'))
  	{
  		$user = UserPeer::retrieveByPK($this->getUser()->getAttribute('user_id'));
  		$user->setPassword($this->getRequestParameter('password'));
  		$user->save();
  		return $this->redirect('user/show');
  	}
  	else
  	  	return sfView::SUCCESS;
  }
  
  public function executeRecord()
  {
  	$user = UserPeer::retrieveByPK($this->getUser()->getAttribute('user_id'));
  	$user->setTwitter($this->getRequestParameter('twitter'));
  	$user->save();
  	$this->owner = $user;
  }
  
  public function executeAdmin()
  {
  	$user = UserPeer::retrieveByPK($this->getRequestParameter('id'));
  	if(is_null($this->getRequestParameter('droit')))
  	{
  		$this->customer = $user;
	  	return sfView::SUCCESS;
  	}
  	else
  	{
	  	$user->setDroit($this->getRequestParameter('droit'));
  		$user->save();
  		return $this->redirect('user/show?id='.$user->getId());
  	}
  }
  public function handleErrorAdmin()
  {
  	return sfView::SUCCESS;
  }
	public function executePasswordRequest()
	{
		if ($this->getRequest()->getMethod() != sfRequest::POST)
		 {
		    // display the form
		    return sfView::SUCCESS;
		 }
	 	 $email = $this->getRequestParameter('email');
		  // handle the form submission
		  $c = new Criteria();
		  $c->add(UserPeer::USERNAME, $email);
		  $user = UserPeer::doSelectOne($c);
		  // email exists?
		  if ($user)
		  {
		    // set new random password
		    $password = substr(md5(rand(100000, 999999)), 0, 6);
		    $user->setPassword($password);
		    $this->getRequest()->setAttribute('password', $password);
		    $this->getRequest()->setAttribute('username', $user->getUsername());		    
		    try
		    {
		    	$raw_email = $this->sendEmail('mail', 'sendPassword');
		    	$this->logMessage($raw_email, 'debug');
		    }
		    catch(Exception $e)
		    {
		    	$this->getRequest()->setError('email', "Can't send to the Email, please contact the manager!" );
		    	return sfView::SUCCESS;
		    }
		    // save new password
		    $user->save();
		    return 'MailSent';
		  }
		  else
		  {
		    $this->getRequest()->setError('email', 'Not registered email address');
		    return sfView::SUCCESS;
		  }
	}
	
  public function handleErrorRecord()
  {
  	return $this->forward('blog','list');
  }
  
  public function handleErrorLogin()
  {
	return sfView::SUCCESS;
  }  
  
  public function handleErrorUpdate()
  {
	$user_id = $this->getRequestParameter('id');
	if(empty($user_id))
	{
		return $this->forward('user','create');
	}
	else
	{
		$this->getRequest()->setParameter('user_id',$user_id);
    	return $this->forward('user','edit');
	}
  }
  public function handleErrorPasswordRequest()
  {
    return sfView::SUCCESS;
  }	
}
