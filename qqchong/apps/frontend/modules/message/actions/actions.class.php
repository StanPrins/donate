<?php
// auto-generated by sfPropelCrud
// date: 2009/09/03 02:12:57
?>
<?php

/**
 * message actions.
 *
 * @package    qqchong
 * @subpackage message
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class messageActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('message', 'list');
  }

  public function executeList()
  {
  	$type = $this->getRequestParameter('type');
  	$ownerid = $this->getUser()->getAttribute('user_id');
  	$m = new Criteria();
  	switch($type)
  	{
  		case 'in':
  			$m->add(MessagePeer::RDEL,0);
  			$m->add(MessagePeer::RECIEVER_ID,$ownerid);
  			$this->category = "Inbox";
  			break;
  		case 'out':
  			$m->add(MessagePeer::SDEL,0);
  			$m->add(MessagePeer::SENDER_ID,$ownerid);
  			$this->category = "Outbox";
  			break;
  		case 'del':
  			$tmp1=$m->getNewCriterion(MessagePeer::SDEL,1);
  			$tmp1->addAnd($m->getNewCriterion(MessagePeer::SENDER_ID,$ownerid));
  			$tmp2=$m->getNewCriterion(MessagePeer::RDEL,1);
  			$tmp2->addAnd($m->getNewCriterion(MessagePeer::RECIEVER_ID,$ownerid));
  			$tmp1->addOr($tmp2);
  			$m->add($tmp1);	
  			$this->category = "Trash";
  			break;  		
  	}
  	$m->addDescendingOrderByColumn(MessagePeer::CREATED_AT);
  	$pager = new sfPropelPager('Message',sfConfig::get('app_pager_max'));
  	$pager->setCriteria($m);
  	$pager->setPage($this->getRequestParameter('page',1));
  	$pager->init();
    $this->pager = $pager;
    $this->type = $type;
  }

  public function executeShow()
  {
    $this->message = MessagePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->message);
  }

  public function executeCreate()
  {
    $this->message = new Message();
    $u = new Criteria();
    $u->add(UserPeer::ID,$this->getUser()->getAttribute('user_id'),Criteria::NOT_EQUAL);
//    $u->add(UserPeer::DEPARTMENT_ID,$this->getUser()->getAttribute('department_id'));
    $u->addAscendingOrderByColumn(UserPeer::NICKNAME);
    $this->users = UserPeer::doSelect($u);
    $this->uNum = UserPeer::doCount($u);

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->message = MessagePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->message);
    $u = new Criteria();
    $u->add(UserPeer::DEPARTMENT_ID,$this->getUser()->getAttribute('department_id'));
    $u->addAscendingOrderByColumn(UserPeer::NICKNAME);
    $this->users = UserPeer::doSelect($u);    
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $message = new Message();
    }
    else
    {
      $message = MessagePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($message);
    }

    $message->setId($this->getRequestParameter('id'));
    $message->setSenderId($this->getUser()->getAttribute('user_id'));
    $message->setRecieverId($this->getRequestParameter('reciever_id') ? $this->getRequestParameter('reciever_id') : null);
    $message->setTitle($this->getRequestParameter('title'));
    $message->setContent($this->getRequestParameter('content'));
    $message->setAnonymity($this->getRequestParameter('anonymity')?$this->getRequestParameter('anonymity'):0);

    $message->save();

    return $this->redirect('message/list?type=out');
  }

  public function executeDelete()
  {
    $message = MessagePeer::retrieveByPk($this->getRequestParameter('id'));    
    $this->forward404Unless($message);
    $userid = $this->getUser()->getAttribute('user_id');
    $type = $this->getRequestParameter('type'); 
	if($type=='del')
		($userid==$message->getSenderId())?$message->setSdel(2):$message->setRdel(2);
	else
	    ($type=='in')?$message->setRdel(1):$message->setSdel(1);
	$message->save();
    return $this->redirect('message/list?type='.$type);
  }
}
