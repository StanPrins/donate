<?php
// auto-generated by sfPropelCrud
// date: 2009/09/03 02:12:21
?>
<?php

/**
 * blog actions.
 *
 * @package    qqchong
 * @subpackage blog
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class blogActions extends sfActions
{
  public function executeList()
  {
  	if($this->getRequestParameter('userid'))
  	{
  	  $ownerid = $this->getRequestParameter('userid');
  	  $admin = false;
  	}
  	else
  	{
  	  $ownerid = $this->getUser()->getAttribute('user_id');
  	  $admin = true;
  	}
  	$this->admin = $admin;
  	$this->owner = UserPeer::retrieveByPK($ownerid);
  	$c = new Criteria();
  	$c->add(BlogPeer::USER_ID,$ownerid);
  	$c->addDescendingOrderByColumn(BlogPeer::CREATED_AT);  	
    $pager = new sfPropelPager('Blog', sfConfig::get('app_pager_max'));
	$pager->setCriteria($c);
	$pager->setPage($this->getRequestParameter('page', 1));
	$pager->init();
	$this->pager = $pager;
  }

  public function executeShow()
  {
  	$this->user = $this->getUser()->getAttribute('user_id');
  	$blog_id = $this->getRequestParameter('id');
    $this->blog = BlogPeer::retrieveByPk($blog_id);
    $this->forward404Unless($this->blog);
    $c = new Criteria();
    $c->add(CommentPeer::BLOG_ID,$blog_id);
    $c->addDescendingOrderByColumn(CommentPeer::CREATED_AT);
    $pager = new sfPropelPager('Comment', sfConfig::get('app_pager_max'));
	$pager->setCriteria($c);
	$pager->setPage($this->getRequestParameter('page', 1));
	$pager->init();
	$this->pager = $pager;
    $this->tinymce_options = sfConfig::get('app_tinymce_options'); 
  }

  public function executeCreate()
  {
    $this->blog = new Blog();   
    $this->tinymce_options = sfConfig::get('app_tinymce_options'); 

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->blog = BlogPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->tinymce_options = sfConfig::get('app_tinymce_options');
    $this->forward404Unless($this->blog);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $blog = new Blog();
    }
    else
    {
      $blog = BlogPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($blog);
    }

    $blog->setId($this->getRequestParameter('id'));
    $blog->setUserId($this->getUser()->getAttribute('user_id'));
    $blog->setTitle($this->getRequestParameter('title'));
    $blog->setContent($this->getRequestParameter('content'));
    if ($this->getRequestParameter('rdtime'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('rdtime'), $this->getUser()->getCulture());
      $blog->setRdtime("$y-$m-$d");
    }

    $blog->save();

    return $this->redirect('blog/show?id='.$blog->getId());
  }

  public function executeDelete()
  {
    $blog = BlogPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($blog);

    $blog->delete();

    return $this->redirect('blog/list');
  }
  
  public function executeRecommend()
  {
  	$blog = BlogPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($blog);
    $blog->setRecommend(1);
    $blog->setRdtime(time());
    $blog->save();    
  }
  public function handleErrorUpdate()
  {
  	$blog_id = $this->getRequestParameter('id');
	if(empty($blog_id))
	{
		return $this->forward('blog','create');
	}
	else
	{
		$this->getRequest()->setParameter('id',$blog_id);
    	return $this->forward('blog','edit');
	}
  }
}
