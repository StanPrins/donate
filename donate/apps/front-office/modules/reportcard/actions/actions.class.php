<?php
// auto-generated by sfPropelCrud
// date: 2009/07/21 08:18:17
?>
<?php

/**
 * reportcard actions.
 *
 * @package    donate
 * @subpackage reportcard
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class reportcardActions extends sfActions
{

	public function executeListstu()
	{
	   if ($this->getRequest()->getMethod() != sfRequest::POST)
	   {
	     return $this->forward404();	   	
	   }		
		$c = new Criteria();
		$c -> add(ReportCardPeer::STUDENT_ID, $this->getRequestParameter('student_id'));
		$pager = new sfPropelPager('ReportCard', sfConfig::get('app_pager_homepage_max'));
		$pager->setPeerMethod('doSelectJoinAll');
		$pager->setCriteria($c);
		$pager->setPage($this->getRequestParameter('page', 1));
		$pager->init();
		$this->pager = $pager;
	}
	
	public function executeListmy()
	{
		$site_id = $this->getRequestParameter('site_id');
	  	$school_id = $this->getRequestParameter('school_id');
	  	$student_name = $this->getRequestParameter('student_name');
	  	
	  	$site_school = 0;
	  	if(!empty($school_id)&& ($school_id!=-1)&&!empty($site_id)&&($site_id!=-1))
	  	{
	  		$ss = new Criteria();
	  		$ss->add(SchoolPeer::SITE_ID,$site_id);
	  		$ss->add(SchoolPeer::SCHOOL_ID,$school_id);
	  		$site_school = SchoolPeer::docount($ss);
	  	}
	  	
	  	$d = new Criteria();
	    $d->clearSelectColumns();  // Clear select columns
	    $d->addSelectColumn(ProjectSitePeer::SITE_ID); // Add new select columns 
	    $d->addSelectColumn(ProjectSitePeer::SITE_NAME);   
	    $d->addAscendingOrderByColumn(ProjectSitePeer::SITE_NAME);
	    $this->projectsites = ProjectSitePeer::doSelectRS($d);
	
	    $e = new Criteria();
	    $e->clearSelectColumns();  // Clear select columns
	    $e->addSelectColumn(SchoolPeer::SCHOOL_ID);// Add new select columns
	    $e->addSelectColumn(SchoolPeer::SCHOOL_NAME);
	    if(!empty($site_id)&&($site_id!=-1))
	    {
	      $e->add(SchoolPeer::SITE_ID,$site_id); 
	      $this->site_id = $site_id;
	    }  
	    $e->addAscendingOrderByColumn(SchoolPeer::SCHOOL_NAME);
	    $this->schools = SchoolPeer::doSelectRS($e);
	    $this->school_count = SchoolPeer::doCount($e);
	    
		$c = new Criteria();
		
		$c->addJoin(ReportCardPeer::STUDENT_ID, StudentPeer::STUDENT_ID, Criteria::LEFT_JOIN);
  		$c->addJoin(StudentPeer::SCHOOL_ID, SchoolPeer::SCHOOL_ID, Criteria::LEFT_JOIN);
  		$c -> add(ReportCardPeer::USER_ID, $this->getUser()->getAttribute('user_id'));
		if(!empty($school_id)&& ($school_id!=-1)&&($site_school!=0))
	  	{
	      $c->add(StudentPeer::SCHOOL_ID,$school_id);
	      $this->school_id = $school_id;
	  	}  	
	  	if(!empty($site_id)&&($site_id!=-1))
	    {
	      $c->add(SchoolPeer::SITE_ID,$site_id); 
	      $this->site_id = $site_id;
	    }         	
	    if(!empty($student_name))
	    {
	      $c->add(StudentPeer::NAME,'%'.$student_name.'%',Criteria::LIKE);
	      $this->student_name = $student_name;
	    }
		
		$pager = new sfPropelPager('ReportCard', sfConfig::get('app_pager_homepage_max'));
		$pager->setPeerMethod('doSelectJoinAll');
		$pager->setCriteria($c);
		$pager->setPage($this->getRequestParameter('page', 1));
		$pager->init();
		$this->pager = $pager;
	}	
	
	public function executeAutocomplete()
	{
		$str = $this->getRequestParameter('student_name');
  		$school_id = $this->getRequestParameter('school_id');
  		$site_id = $this->getRequestParameter('site_id');
  		$my = $this->getRequestParameter('my');
  		$c = new Criteria();
  		$c->addJoin(StudentPeer::STUDENT_ID, ReportCardPeer::STUDENT_ID, Criteria::RIGHT_JOIN);
  		$c->addJoin(StudentPeer::SCHOOL_ID, SchoolPeer::SCHOOL_ID, Criteria::LEFT_JOIN);
  		if( 1==$my )
  			$c->add(ReportCardPeer::USER_ID, $this->getUser()->getAttribute('user_id')); 		  		
  		if(!empty($school_id)&&($school_id!=-1))
      		$c->add(StudentPeer::SCHOOL_ID,$school_id);
	    if(!empty($site_id)&&($site_id!=-1))
	    	$c->add(SchoolPeer::SITE_ID,$site_id);
	    $c->add(StudentPeer::NAME,'%'.$str.'%',Criteria::LIKE);
	    $c->addAscendingOrderByColumn(StudentPeer::NAME);
	    $c->setDistinct();
	    $students = StudentPeer::doSelect($c);
	    $this->students = $students;
	}
	
	public function executeListall()
	{
		$site_id = $this->getRequestParameter('site_id');
	  	$school_id = $this->getRequestParameter('school_id');
	  	$student_name = $this->getRequestParameter('student_name');
	  	
	  	$site_school = 0;
	  	if(!empty($school_id)&& ($school_id!=-1)&&!empty($site_id)&&($site_id!=-1))
	  	{
	  		$ss = new Criteria();
	  		$ss->add(SchoolPeer::SITE_ID,$site_id);
	  		$ss->add(SchoolPeer::SCHOOL_ID,$school_id);
	  		$site_school = SchoolPeer::docount($ss);
	  	}
	  	
	  	$d = new Criteria();
	    $d->clearSelectColumns();  // Clear select columns
	    $d->addSelectColumn(ProjectSitePeer::SITE_ID); // Add new select columns 
	    $d->addSelectColumn(ProjectSitePeer::SITE_NAME);   
	    $d->addAscendingOrderByColumn(ProjectSitePeer::SITE_NAME);
	    $this->projectsites = ProjectSitePeer::doSelectRS($d);
	
	    $e = new Criteria();
	    $e->clearSelectColumns();  // Clear select columns
	    $e->addSelectColumn(SchoolPeer::SCHOOL_ID);// Add new select columns
	    $e->addSelectColumn(SchoolPeer::SCHOOL_NAME);
	    if(!empty($site_id)&&($site_id!=-1))
	    {
	      $e->add(SchoolPeer::SITE_ID,$site_id); 
	      $this->site_id = $site_id;
	    }  
	    $e->addAscendingOrderByColumn(SchoolPeer::SCHOOL_NAME);
	    $this->schools = SchoolPeer::doSelectRS($e);
	    $this->school_count = SchoolPeer::doCount($e);
	    
		$c = new Criteria();
		
		$c->addJoin(ReportCardPeer::STUDENT_ID, StudentPeer::STUDENT_ID, Criteria::LEFT_JOIN);
  		$c->addJoin(StudentPeer::SCHOOL_ID, SchoolPeer::SCHOOL_ID, Criteria::LEFT_JOIN);
		if(!empty($school_id)&& ($school_id!=-1)&&($site_school!=0))
	  	{
	      $c->add(StudentPeer::SCHOOL_ID,$school_id);
	      $this->school_id = $school_id;
	  	}  	
	  	if(!empty($site_id)&&($site_id!=-1))
	    {
	      $c->add(SchoolPeer::SITE_ID,$site_id); 
	      $this->site_id = $site_id;
	    }         	
	    if(!empty($student_name))
	    {
	      $c->add(StudentPeer::NAME,'%'.$student_name.'%',Criteria::LIKE);
	      $this->student_name = $student_name;
	    }
  		
		$pager = new sfPropelPager('ReportCard', sfConfig::get('app_pager_homepage_max'));
		$pager->setPeerMethod('doSelectJoinAll');
		$pager->setCriteria($c);
		$pager->setPage($this->getRequestParameter('page', 1));
		$pager->init();
		$this->pager = $pager;
	}	

	public function executeShow()
	{
		$this->report_card = ReportCardPeer::retrieveByPk($this->getRequestParameter('report_id'));
		$this->forward404Unless($this->report_card);
		
		$c =new Criteria();
		$c->add(DonationPeer::STUDENT_ID, $this->report_card->getStudentId());
		$donations = DonationPeer::doSelect($c);
		
	    $usertype = $this->getContext()->getUser()->getAttribute('usertype','');
    	$user_id = $this->getContext()->getUser()->getAttribute('user_id','');
    	
    	if ($usertype == 'volunteer' )
    	{
    	   $flag_no = 1;
    	   foreach($donations as $donation)
    	   {
    	      if ( $user_id == $donation->getUserId() )
    	      {
                 $flag_no = 0;
    	      }
    	   }
    	   if ($flag_no)
    	   {
    		  return $this->forward404();
    	   }
    	}
    	
	}

	public function executeCreate()
	{
		$this->report_card = new ReportCard();

		$this->report_card->setUserId($this->getUser()->getAttribute('user_id'));
		$d = new Criteria();
		$d -> add(UserPeer::USER_ID, $this->getUser()->getAttribute('user_id'));
		$this->user = UserPeer::doSelectOne($d);
		
		if($this->getRequestParameter('student_id'))
		{
		   $this->report_card->setStudentId($this->getRequestParameter('student_id'));
		   $c = new Criteria();
		   $c -> add(StudentPeer::STUDENT_ID, $this->getRequestParameter('student_id'));
		   $this->student = StudentPeer::doSelectOne($c);
		}
		$e = new Criteria();
		$e->addAscendingOrderByColumn(StudentPeer::NAME);		
		$this->student = StudentPeer::doSelect($e);
		
		$s =new Criteria();
    	$s->addAscendingOrderByColumn(ProjectSitePeer::SITE_NAME);
    	$this->site = ProjectSitePeer::doSelect($s);
    	$p = new Criteria();
    	$p->addAscendingOrderByColumn(SchoolPeer::SCHOOL_NAME);
    	$this->school = SchoolPeer::doSelect($p);
	}

	public function executeEdit()
	{
		$this->report_card = ReportCardPeer::retrieveByPk($this->getRequestParameter('report_id'));
		$this->forward404Unless($this->report_card);
	}

	public function executeUpdate()
	{
	   if ($this->getRequest()->getMethod() != sfRequest::POST)
	   {
	     return $this->forward404();	   	
	   }
	   
		if (!$this->getRequestParameter('report_id'))
		{
			$report_card = new ReportCard();
		}
		else
		{
			$report_card = ReportCardPeer::retrieveByPk($this->getRequestParameter('report_id'));
			$this->forward404Unless($report_card);
		}

		$report_card->setReportId($this->getRequestParameter('report_id'));
		$report_card->setStudentId($this->getRequestParameter('student_id') ? $this->getRequestParameter('student_id') : null);
		$report_card->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
		$report_card->setTerm($this->getRequestParameter('term'));
		$report_card->setYuwen($this->getRequestParameter('yuwen'));
		$report_card->setShuxue($this->getRequestParameter('shuxue'));
		$report_card->setYingyu($this->getRequestParameter('yingyu'));
		$report_card->setWuli($this->getRequestParameter('wuli'));
		$report_card->setHuaxue($this->getRequestParameter('huaxue'));
		$report_card->setLishi($this->getRequestParameter('lishi'));
		$report_card->setDili($this->getRequestParameter('dili'));
		$report_card->setZiran($this->getRequestParameter('ziran'));
		$report_card->setShengwu($this->getRequestParameter('shengwu'));
		$report_card->setTiyu($this->getRequestParameter('tiyu'));
		$report_card->setZhengzhi($this->getRequestParameter('zhengzhi'));
		$report_card->setZonghe($this->getRequestParameter('zonghe'));
		$report_card->setRank($this->getRequestParameter('rank'));
		$report_card->setTeacherRemark($this->getRequestParameter('teacher_remark'));

		$report_card->save();

		return $this->redirect('@score_show?report_id='.$report_card->getReportId().'&after_edit=1');
	}

	/*public function executeDelete()
	{
		$report_card = ReportCardPeer::retrieveByPk($this->getRequestParameter('report_id'));

		$this->forward404Unless($report_card);

		$report_card->delete();

		//return $this->redirect('reportcard/list');
        return $this->redirect($this->getRequest()->getReferer());
		
	}*/
	public function handleErrorUpdate()
	{
		$report_id = $this->getRequestParameter('report_id');
		if(empty($report_id))
		{
			return $this->forward('reportcard','create');
		}
		else
		{
			$this->getRequest()->setParameter('report_id',$report_id);
	    	return $this->forward('reportcard','edit');
		}
	}
}
